// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gunnermanx/simplegameserver/game_server/game/player (interfaces: GamePlayer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	game_messages "github.com/gunnermanx/simplegameserver/game_server/game/messages"
)

// MockGamePlayer is a mock of GamePlayer interface.
type MockGamePlayer struct {
	ctrl     *gomock.Controller
	recorder *MockGamePlayerMockRecorder
}

// MockGamePlayerMockRecorder is the mock recorder for MockGamePlayer.
type MockGamePlayerMockRecorder struct {
	mock *MockGamePlayer
}

// NewMockGamePlayer creates a new mock instance.
func NewMockGamePlayer(ctrl *gomock.Controller) *MockGamePlayer {
	mock := &MockGamePlayer{ctrl: ctrl}
	mock.recorder = &MockGamePlayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGamePlayer) EXPECT() *MockGamePlayerMockRecorder {
	return m.recorder
}

// CloseConnection mocks base method.
func (m *MockGamePlayer) CloseConnection() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseConnection")
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockGamePlayerMockRecorder) CloseConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockGamePlayer)(nil).CloseConnection))
}

// CloseConnectionWithError mocks base method.
func (m *MockGamePlayer) CloseConnectionWithError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseConnectionWithError", arg0)
}

// CloseConnectionWithError indicates an expected call of CloseConnectionWithError.
func (mr *MockGamePlayerMockRecorder) CloseConnectionWithError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnectionWithError", reflect.TypeOf((*MockGamePlayer)(nil).CloseConnectionWithError), arg0)
}

// GetContext mocks base method.
func (m *MockGamePlayer) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockGamePlayerMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockGamePlayer)(nil).GetContext))
}

// GetID mocks base method.
func (m *MockGamePlayer) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockGamePlayerMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockGamePlayer)(nil).GetID))
}

// Read mocks base method.
func (m *MockGamePlayer) Read() (game_messages.GameMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(game_messages.GameMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockGamePlayerMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockGamePlayer)(nil).Read))
}

// Write mocks base method.
func (m *MockGamePlayer) Write(arg0 game_messages.GameMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockGamePlayerMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockGamePlayer)(nil).Write), arg0)
}
